"""Prototype of differential privacy system for eventual implementation on a Lattice ice40 FPGA
Gregory Brooks 2018


Based on the following references:

Choi, Woo-Seok & Tomei, Matthew & Rodrigo Sanchez Vicarte, Jose & Kumar Hanumolu, Pavan & Kumar, Rakesh. (2018).
Guaranteeing Local Differential Privacy on Ultra-Low-Power Systems. 561-574. 10.1109/ISCA.2018.00053.

Christian de Schryver, Daniel Schmidt, Norbert Wehn, et al., “A Hardware Efficient Random Number Generator for
Nonuniform Distributions with Arbitrary Precision,” International Journal of Reconfigurable Computing, vol. 2012,
Article ID 675130, 11 pages, 2012.
"""

from random import getrandbits, random
from dataclasses import dataclass

@dataclass
class RandFloat:
    """m bit floating point representation used by Schryver et al.

    symm     -- symmetry bit indicates which half of a symmetrical ICDF the random value lies within
    part     -- part bit splits the encoded half of the ICDF into two parts
    exponent -- m - mant_bw - 2 bits
    mantissa -- mant_bw bits
    """
    symm: bool
    part: bool
    exponent: bytes
    mantissa: bytes


class Rng:
    """Simulate fixed point RNG."""
    def __init__(self, Bx, By, k, mant_bw):
        """Initialise object, set the number of bits used by URNG and Laplace output.
        Conversion from URNG to Laplace distribution is described by Schryver et al.

        # Notation from Choi et al.
        Bx -- number of random bits generated by the URNG
        By -- number of random bits in the RNG output (Laplace distribution)

        # Inversion Method described by Schryver et al.
        k       -- each 'octave' is divided into 2**k 'subsections'
        mant_bw -- width of mantissa of floating point URNG output representation
        """

        self.Bx = Bx
        self.By = By

        self.k = k
        self.mant_bw = mant_bw
        self.exp_bw = self.Bx - 2 - self.mant_bw  # Width of exponent in floating point URNG output representation

    def urng(self, bits = self.Bx):
        """Return a random number from the URNG.

        bits -- (Optional) number of bits in random output. Defaults to value set during Rng.init()
        """
        random_bits = getrandbits(bits)
        return random_bits

    def urngToFloatingPoint(self):
        #TODO: complete function


class Sensor:
    """Represents hardware sensor and driver, output is a base Newton signal."""
    def __init__(self, min, max):
        """Initialise object, set the range of the sensor output.

        min -- minimum sensor output
        max -- maximum sensor output
        """
        self.min = min(min, max)  # Ensure max and min are the right way round
        self.max = max(min, max)
        self.d = self.max - self.min  # Notation from Choi et al.

    def read(self):
        """Simulate reading from the physical sensor."""
        return self.min + self.d * random()  # Return a random value within the sensor range

if __name__ == '__main__':
    pass